#include <iostream>

using namespace std;

class Complex{
    // Created the class
    private:
    int real;
    int img;
    public:
    // Default Constructor
    Complex(){
        real=0;
        img=0;
    }
    Complex(int r, int i){
        real=r;
        img=i;
    }
    printc(Complex c){
        cout<<c.real<<"+ i"<<c.img<<endl;
    }
    // Oparator overloading
    Complex operator+(Complex C) {
        Complex cTemp;
        cTemp.real = real + C.real;
        cTemp.img  = img  + C.img;

        return cTemp;
    }
    Complex operator*(Complex c1) 
    {
        Complex c2;
        c2.real = real * c1.real - img * c1.img;
        c2.img  = real * c1.img + img  * c1.real;
    }
    // friend class
    friend ostream &operator<<(ostream &out , Complex &c){
        out<<c.real<<"+ i"<<c.img<<endl;
    }
    friend istream &operator>>(istream &in , Complex &c){
        cout<<"Enter real value"<<endl;
        in>>c.real;
        cout<<"Enter img value"<<endl;
        cout<<"i";
        in>>c.img;
        return in;
    }
    
};

int  main(){
    Complex c1(5,5);
    Complex c2(10,10);
    Complex c3=c1+c2;
    Complex c4=c1*c2;
    Complex c5;
    cin>>c5;
    cout<<c1<<c2<<c3<<c4<<c5;
    
}
